/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.honeybadgers.taskapi.controllers;

import com.honeybadgers.taskapi.models.ErrorModel;
import com.honeybadgers.taskapi.models.ResponseModel;
import com.honeybadgers.taskapi.models.TaskModel;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-02T17:33:16.300+02:00[Europe/Berlin]")

@Validated
@Api(value = "{task_Id}", description = "the {task_Id} API")
public interface TaskIdApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /{task_Id}
     * Delete task from Database
     *
     * @param taskId  (required)
     * @return Task was deleted successfully (status code 200)
     *         or Error while deleting task - task_id not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "", nickname = "taskIdDelete", notes = "Delete task from Database", response = TaskModel.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Task was deleted successfully", response = TaskModel.class),
        @ApiResponse(code = 404, message = "Error while deleting task - task_id not found", response = ErrorModel.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorModel.class) })
    @RequestMapping(value = "/{task_Id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<TaskModel> taskIdDelete(@ApiParam(value = "",required=true) @PathVariable("task_Id") String taskId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"working_days\" : [ true, true, true, true, true ], \"active_times\" : [ \"{}\", \"{}\" ], \"history\" : [ \"{}\", \"{}\" ], \"priority\" : 800, \"mode\" : \"parallel\", \"retries\" : 0, \"index_number\" : 1, \"group_id\" : \"group_id\", \"meta\" : [ { \"value\" : \"value\", \"key\" : \"key\" }, { \"value\" : \"value\", \"key\" : \"key\" } ], \"force\" : false, \"id\" : \"id\", \"deadline\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"waiting\", \"type_flag\" : \"batch\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /{task_Id}
     * Return task by task_Id from Database
     *
     * @param taskId  (required)
     * @return Task was returned successfully (status code 200)
     *         or Error while retrieving task - task_Id not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "", nickname = "taskIdGet", notes = "Return task by task_Id from Database", response = TaskModel.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Task was returned successfully", response = TaskModel.class),
        @ApiResponse(code = 404, message = "Error while retrieving task - task_Id not found", response = ErrorModel.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorModel.class) })
    @RequestMapping(value = "/{task_Id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TaskModel> taskIdGet(@ApiParam(value = "",required=true) @PathVariable("task_Id") String taskId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"working_days\" : [ true, true, true, true, true ], \"active_times\" : [ \"{}\", \"{}\" ], \"history\" : [ \"{}\", \"{}\" ], \"priority\" : 800, \"mode\" : \"parallel\", \"retries\" : 0, \"index_number\" : 1, \"group_id\" : \"group_id\", \"meta\" : [ { \"value\" : \"value\", \"key\" : \"key\" }, { \"value\" : \"value\", \"key\" : \"key\" } ], \"force\" : false, \"id\" : \"id\", \"deadline\" : \"2000-01-23T04:56:07.000+00:00\", \"status\" : \"waiting\", \"type_flag\" : \"batch\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /{task_Id}
     * Update task in Database
     *
     * @param taskId  (required)
     * @param taskModel Task object (required)
     * @return New task was updated successfully (status code 200)
     *         or Error while updating task - invalid task model (status code 400)
     *         or Error while updating task - task_id not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @ApiOperation(value = "", nickname = "taskIdPost", notes = "Update task in Database", response = ResponseModel.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "New task was updated successfully", response = ResponseModel.class),
        @ApiResponse(code = 400, message = "Error while updating task - invalid task model", response = ErrorModel.class),
        @ApiResponse(code = 404, message = "Error while updating task - task_id not found", response = ErrorModel.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = ErrorModel.class) })
    @RequestMapping(value = "/{task_Id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ResponseModel> taskIdPost(@ApiParam(value = "",required=true) @PathVariable("task_Id") String taskId,@ApiParam(value = "Task object" ,required=true )  @Valid @RequestBody TaskModel taskModel) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
